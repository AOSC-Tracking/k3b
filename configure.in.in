#MIN_CONFIG

CCAS=$(CC)
CCASFLAGS=$(CFLAGS)
AC_SUBST(CCAS)
AC_SUBST(CCASFLAGS)
AS=$(CC)
ASFLAGS=$(CFLAGS)
AC_SUBST(AS)
AC_SUBST(ASFLAGS)

#AC_PROG_CC

linux_scsi=no
AC_MSG_CHECKING(for linux scsi headers)
AC_TRY_COMPILE([
	#include <sys/types.h>
	#include <linux/../scsi/scsi.h> /* cope with silly includes */
	],[],[linux_scsi=yes
	])
AC_MSG_RESULT($linux_scsi)


CDPARANOIA_LIBS=""
AC_MSG_CHECKING(for cdparanoia headers)
cdda_paranoia=no
AC_TRY_COMPILE([
		#include <sys/types.h> 
		typedef int16_t size16;
		typedef int32_t size32;
                #include <cdda_interface.h>
                #include <cdda_paranoia.h>
                ],[
                ],[
                cdda_paranoia=yes
                ])
dnl currently disabled
dnl cdda_paranoia=no
AC_MSG_RESULT($cdda_paranoia)
if test x$cdda_paranoia = xyes; then
   dnl we need the cdda_paranoia_lib because otherwise we override LIBS !
   AC_CHECK_LIB(cdda_paranoia,paranoia_init,cdda_paranoia_lib=yes,
                cdda_paranoia=no,[-lcdda_paranoia -lcdda_interface])
fi
if test x$cdda_paranoia = xyes; then
   AC_DEFINE(CDDA_PARANOIA,1,[Define if you have cdparanoia installed])
   CDPARANOIA_LIBS="-lcdda_paranoia -lcdda_interface"
fi


AC_SUBST(CDPARANOIA_LIBS)


OGG_VORBISLIBS=""
AC_MSG_CHECKING(for ogg/vorbis headers)
ogg_vorbis=no
AC_TRY_COMPILE([
		#include <vorbis/codec.h>
		#include <vorbis/vorbisfile.h>
                ],[
                ],[
                ogg_vorbis=yes
                ])
AC_MSG_RESULT($ogg_vorbis)
if test x$ogg_vorbis = xyes; then
   dnl we need the ogg_vorbis_lib because otherwise we override LIBS !
   AC_CHECK_LIB(vorbisfile,ov_open,ogg_vorbis_lib=yes,
                ogg_vorbis=no,[-lvorbisfile -lvorbis -logg])
fi
if test x$ogg_vorbis = xyes; then
   AC_DEFINE(OGG_VORBIS,1,[Define if you have ogg/vorbis installed])
   OGG_VORBISLIBS="-lvorbisfile -lvorbis -logg"
fi

AC_SUBST(OGG_VORBISLIBS)


if test x$ogg_vorbis = xno; then
	echo ""
	echo "No Ogg Vorbis library and headers found."
	echo "Ogg Vorbis support disabled."
	echo ""
fi



#the libmad stuff
dnl Compiler options.

arch=""
debug=""
optimize=""
profile=""

set -- $CFLAGS
CFLAGS="-Wall"

if test "$GCC" = yes
then
    case "$host" in
	*-pc-cygwin)
	    CPPFLAGS="$CPPFLAGS -mno-cygwin"
	    LDFLAGS="$LDFLAGS -mno-cygwin"
	    ;;
    esac
fi

while test $# -gt 0
do
    case "$1" in
	-Wall)
	    shift
	    ;;
	-g)
	    debug="-g"
	    shift
	    ;;
	-mno-cygwin)
	    shift
	    ;;
	-m*)
	    arch="$arch $1"
	    shift
	    ;;
	-O2)
	    optimize="-O"
	    shift
	    ;;
	-fomit-frame-pointer)
	    shift
	    ;;
	-O*|-f*)
	    optimize="$optimize $1"
	    shift
	    ;;
	*)
	    CFLAGS="$CFLAGS $1"
	    shift
	    ;;
    esac
done

if test "$GCC" = yes
then
    if test -z "$arch"
    then
	case "$host" in
	    i386-*)           ;;
	    i?86-*)           arch="-m486" ;;
	    arm*-empeg-*)     arch="-march=armv4 -mtune=strongarm1100" ;;
	    armv4*-*)         arch="-march=armv4 -mtune=strongarm" ;;
	    powerpc-*)        ;;
	    mips*-agenda-*)   arch="-mcpu=vr4100" ;;
	    mips*-luxsonor-*) arch="-mips1 -mcpu=r3000 -Wa,-m4010" ;;
	esac
    fi

    case "$optimize" in
	-O|"-O "*)
	    optimize="-O"
	    optimize="$optimize -fforce-mem"
	    optimize="$optimize -fforce-addr"
	    : #x optimize="$optimize -finline-functions"
	    : #- optimize="$optimize -fstrength-reduce"
	    optimize="$optimize -fthread-jumps"
	    optimize="$optimize -fcse-follow-jumps"
	    optimize="$optimize -fcse-skip-blocks"
	    : #x optimize="$optimize -frerun-cse-after-loop"
	    : #x optimize="$optimize -frerun-loop-opt"
	    : #x optimize="$optimize -fgcse"
	    optimize="$optimize -fexpensive-optimizations"
	    optimize="$optimize -fregmove"
	    : #* optimize="$optimize -fdelayed-branch"
	    : #x optimize="$optimize -fschedule-insns"
	    optimize="$optimize -fschedule-insns2"
	    : #? optimize="$optimize -ffunction-sections"
	    : #? optimize="$optimize -fcaller-saves"
	    : #> optimize="$optimize -funroll-loops"
	    : #> optimize="$optimize -funroll-all-loops"
	    : #x optimize="$optimize -fmove-all-movables"
	    : #x optimize="$optimize -freduce-all-givs"
	    : #? optimize="$optimize -fstrict-aliasing"
	    : #* optimize="$optimize -fstructure-noalias"

	    case "$host" in
		arm*-*)
		    # this may provoke bugs in gcc 2.95.2
		    optimize="$optimize -fstrength-reduce"
		    #
		    # this may actually be slower but it
		    # triggers bugs if not included
		    optimize="$optimize -finline-functions"
		    ;;
		mips*-*)
		    optimize="$optimize -fstrength-reduce"
		    optimize="$optimize -finline-functions"
		    ;;
		i?86-*)
		    optimize="$optimize -fstrength-reduce"
		    ;;
		*)
		    # this sometimes provokes bugs in gcc 2.95.2
		    : #optimize="$optimize -fstrength-reduce"
		    ;;
	    esac
	    ;;
    esac
fi

case "$host" in
    mips*-agenda-*)   AC_DEFINE(HAVE_MADD16_ASM,1,[test]) ;;
    mips*-luxsonor-*) AC_DEFINE(HAVE_MADD_ASM,1,[test])   ;;
esac

dnl Checks for header files.

AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(assert.h limits.h unistd.h sys/types.h fcntl.h errno.h)

dnl Checks for typedefs, structures, and compiler characteristics.

AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T

AC_CHECK_SIZEOF(int, 2)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(long long, 8)

dnl Checks for library functions.

AC_CHECK_FUNCS(waitpid fcntl pipe fork)

dnl Other options.

AC_SUBST(FPM)
AC_SUBST(ASO)
AC_SUBST(ASO_OBJS)

dnl handle --enable and --disable options

AC_CACHE_SAVE

AC_MSG_CHECKING(whether to optimize for speed or for accuracy)

AC_ARG_ENABLE(speed,
    [  --enable-speed          optimize for speed over accuracy], [
    case "$enableval" in
	yes)
	    optimize_for="speed"
	    AC_DEFINE(OPT_SPEED,1,[test])
	    ;;
    esac
])

AC_ARG_ENABLE(accuracy,
    [  --enable-accuracy       optimize for accuracy over speed], [
    case "$enableval" in
	yes)
	    if test "$optimize_for" = "speed"
	    then
		optimize_for="both"
	    else
		optimize_for="accuracy"
	    fi
	    AC_DEFINE(OPT_ACCURACY,1,[test])
	    ;;
    esac
])

AC_MSG_RESULT(${optimize_for-default})

if test "$optimize_for" = "both"
then
    AC_MSG_ERROR(cannot optimize for both speed and accuracy)
fi

AC_MSG_CHECKING(for architecture-specific fixed-point math routines)
AC_ARG_ENABLE(fpm,
    [  --enable-fpm=ARCH       use ARCH-specific fixed-point math routines
                          (one of: intel, arm, mips, sparc, ppc,
                           64bit, default)], [
    case "$enableval" in
	yes)                             ;;
	no|default|approx) FPM="DEFAULT" ;;
	intel|i?86)        FPM="INTEL"   ;;
	arm)               FPM="ARM"     ;;
	mips)              FPM="MIPS"    ;;
	sparc)             FPM="SPARC"   ;;
	ppc|powerpc)       FPM="PPC"     ;;
	64bit)             FPM="64BIT"   ;;
	float)             FPM="FLOAT"   ;;
	*)
	    AC_MSG_RESULT(failed)
	    AC_MSG_ERROR([bad --enable-fpm option])
	    ;;
    esac
])

if test -z "$FPM" && test "$GCC" = yes
then
    case "$host" in
	i?86-*)     FPM="INTEL"  ;;
	arm*-*)     FPM="ARM"    ;;
	mips*-*)    FPM="MIPS"   ;;
	sparc*-*)   FPM="SPARC"  ;;
	powerpc*-*) FPM="PPC"    ;;
	# FIXME: need to test for 64-bit long long...
    esac
fi

AC_MSG_RESULT(${FPM=DEFAULT})

if test "$FPM" = "DEFAULT"
then
    AC_MSG_WARN([default fixed-point math will yield limited accuracy])
fi

FPM="-DFPM_$FPM"

AC_ARG_ENABLE(sso,
    [  --enable-sso            use subband synthesis optimization], [
    case "$enableval" in
	yes) AC_DEFINE(OPT_SSO,1,[test]) ;;
    esac
])

AC_ARG_ENABLE(aso,
    [  --disable-aso           disable architecture-specific optimizations],
    [], [enable_aso=yes])

if test "$enable_aso" = yes
then
    case "$host" in
	i?86-*)
	    : #ASO="$ASO -DASO_INTERLEAVE1"
	    ASO="$ASO -DASO_ZEROCHECK"
	    : #not yet #ASO="$ASO -DASO_SYNTH"
	    : #not yet #ASO_OBJS="synth_mmx.lo"
	    ;;
	arm*-*)
	    ASO="$ASO -DASO_INTERLEAVE1"
	    ASO="$ASO -DASO_IMDCT"
	    ASO_OBJS="imdct_l_arm.lo"
	    ;;
	mips*-*)
	    ASO="$ASO -DASO_INTERLEAVE2"
	    ASO="$ASO -DASO_ZEROCHECK"
	    ;;
    esac
fi

AC_MSG_CHECKING(for ISO/IEC interpretation)
AC_ARG_ENABLE(strict-iso,
    [  --enable-strict-iso     use strict ISO/IEC interpretations], [
    case "$enableval" in
	yes)
	    AC_DEFINE(OPT_STRICT,1,[test])
	    interpretation="strict"
	    ;;
    esac
])
AC_MSG_RESULT(${interpretation-best accepted practices})

AC_MSG_CHECKING(whether to enable profiling)
AC_ARG_ENABLE(profiling,
    [  --enable-profiling      generate profiling code], [
    case "$enableval" in
	yes) profile="-pg" ;;
    esac
])
AC_MSG_RESULT(${enable_profiling-no})

AC_MSG_CHECKING(whether to enable debugging)
AC_ARG_ENABLE(debugging,
    [  --enable-debugging      enable diagnostic debugging support
  --disable-debugging     do not enable debugging and use more optimization], [
    case "$enableval" in
	yes)
	    AC_DEFINE(DEBUG,1,[test])
	    optimize=""
	    ;;
	no)
	    if test -n "$profile"
	    then
    AC_MSG_ERROR(--enable-profiling and --disable-debugging are incompatible)
	    fi

	    AC_DEFINE(NDEBUG,1,[test])
	    debug=""
	    if test "$GCC" = yes
	    then
		optimize="$optimize -fomit-frame-pointer"
	    fi
	    ;;
    esac
])
AC_MSG_RESULT(${enable_debugging-default})

AC_MSG_CHECKING(whether to enable experimental code)
AC_ARG_ENABLE(experimental,
    [  --enable-experimental   enable experimental code], [
    case "$enableval" in
	yes) AC_DEFINE(EXPERIMENTAL,1,[test]) ;;
    esac
])
AC_MSG_RESULT(${enable_experimental-no})

dnl Create output files.

test -n "$arch"     && CFLAGS="$CFLAGS $arch"
test -n "$debug"    && CFLAGS="$CFLAGS $debug"
test -n "$optimize" && CFLAGS="$CFLAGS $optimize"
test -n "$profile"  && CFLAGS="$CFLAGS $profile" LDFLAGS="$LDFLAGS $profile"

if test "x$linux_scsi" = "xno" -o "x$cdda_paranoia" = "xno" ; then
	DO_NOT_COMPILE="$DO_NOT_COMPILE k3b"
fi
